{"version":3,"sources":["About.js","Restaurants.js","Restaurant.js","NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["About","Card","Header","as","Body","Title","Text","class","data-version","data-size","data-locale","data-type","data-theme","data-vanity","href","Restaurants","props","queryBorough","queryString","parse","query","borough","useState","restaurants","setRestaurants","page","setPage","history","useHistory","undefined","useEffect","fetch","then","res","json","rest","console","log","bg","length","Subtitle","className","Table","striped","bordered","hover","map","restaurant","onClick","push","_id","name","address","building","street","cuisine","Pagination","Prev","Item","Next","Restaurant","setRestaurant","loading","setLoading","id","data","hasOwnProperty","catch","e","MapContainer","style","height","center","coord","zoom","scrollWheelZoom","TileLayer","url","Marker","position","CardDeck","grades","grade","moment","date","format","NotFound","App","searchString","setSearchString","Navbar","expand","to","Brand","Toggle","aria-controls","Collapse","Nav","Link","Form","onSubmit","preventDefault","inline","FormControl","type","placeholder","value","onChange","target","Button","variant","Container","Row","Col","exact","path","render","location","search","match","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f3d9c80.chunk.js","sourcesContent":["import { Card } from \"react-bootstrap\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <>\r\n      <br></br>\r\n      <Card>\r\n        <Card.Header as=\"h5\">About</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>All about me - Ye Jin Kim</Card.Title>\r\n          <Card.Text>\r\n            My name is Ye Jin Kim and I am currently in my fourth semester in\r\n            the Computer Programming & Analysis program and working towards an\r\n            Advanced Diploma at Seneca College. <br></br>\r\n            <br></br>\r\n            This is my assignment of WEB 422 course. For this assignment, I used\r\n            React to create an interface for viewing restaurants and used\r\n            \"Restaurants\" API on the client-side to produce a rich user\r\n            interface for accessing data.<br></br>\r\n            <br></br>\r\n            To find more about me, please visit my LinkedIn and feel free to\r\n            contact me!\r\n          </Card.Text>\r\n\r\n          <div\r\n            class=\"LI-profile-badge\"\r\n            data-version=\"v1\"\r\n            data-size=\"medium\"\r\n            data-locale=\"ko_KR\"\r\n            data-type=\"horizontal\"\r\n            data-theme=\"light\"\r\n            data-vanity=\"yejinkim5979\"\r\n          >\r\n            <a\r\n              class=\"LI-simple-link\"\r\n              href=\"https://ca.linkedin.com/in/yejinkim5979?trk=profile-badge\"\r\n            >\r\n              Ye Jin Kim\r\n            </a>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { Pagination, Table, Card } from \"react-bootstrap\";\r\nimport queryString from \"query-string\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function Restaurants(props) {\r\n  let queryBorough = queryString.parse(props.query).borough;\r\n  const [restaurants, setRestaurants] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  let history = useHistory();\r\n  if (queryBorough === undefined) {\r\n    queryBorough = \"\";\r\n  }\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://frozen-dusk-43857.herokuapp.com/api/restaurants?page=${page}&perPage=10&borough=${queryBorough}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((rest) => {\r\n        setRestaurants(rest);\r\n      });\r\n  }, [page, queryBorough]);\r\n\r\n  console.log(restaurants);\r\n\r\n  function previousPage() {\r\n    if (page > 1) {\r\n      setPage(page - 1);\r\n    }\r\n  }\r\n  function nextPage() {\r\n    setPage(page + 1);\r\n  }\r\n\r\n  if (!restaurants) {\r\n    return (\r\n      <div>\r\n        <br></br>\r\n      <Card bg=\"light\">\r\n        <Card.Body>Loading Restaurants...</Card.Body>\r\n      </Card>\r\n      </div>\r\n    );\r\n  }\r\n  if (restaurants == null) {\r\n    return (\r\n      <div>\r\n        <br></br>\r\n      <Card bg=\"light\">\r\n        <Card.Body>No Restaurants Found</Card.Body>\r\n      </Card>\r\n      </div>\r\n    );\r\n  } else {\r\n    if (restaurants.length > 0) {\r\n      return (\r\n        <div>\r\n          <br></br>\r\n          <Card bg=\"light\">\r\n            <Card.Body>\r\n              <Card.Title>Restaurant List</Card.Title>\r\n              <Card.Subtitle className=\"mb-2 text-muted\">\r\n                Full list of restaurants. Optionally sorted by borough\r\n              </Card.Subtitle>\r\n            </Card.Body>\r\n          </Card>\r\n          <br></br>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Address</th>\r\n                <th>Borough</th>\r\n                <th>Cuisine</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {restaurants.map((restaurant) => (\r\n                <tr\r\n                  key={restaurant._id}\r\n                  onClick={() => {\r\n                    history.push(`/restaurant/${restaurant._id}`);\r\n                  }}\r\n                >\r\n                  <td>{restaurant.name}</td>\r\n                  <td>\r\n                    {restaurant.address.building} {restaurant.address.street}\r\n                  </td>\r\n                  <td>{restaurant.borough}</td>\r\n                  <td>{restaurant.cuisine}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          <Pagination>\r\n            <Pagination.Prev onClick={previousPage} />\r\n            <Pagination.Item>{page}</Pagination.Item>\r\n            <Pagination.Next onClick={nextPage} />\r\n          </Pagination>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <Card>\r\n          <Card.Body>No Restaurants Found</Card.Body>\r\n        </Card>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\";\r\nimport { Card, CardDeck } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nexport default function Restaurant(props) {\r\n  const [restaurant, setRestaurant] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetch(`https://frozen-dusk-43857.herokuapp.com/api/restaurants/${props.id}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.hasOwnProperty(\"_id\")) {\r\n          setRestaurant(data);\r\n        } else {\r\n          setRestaurant(null);\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  }, [props.id]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <Card.Body>Loading Restaurants...</Card.Body>\r\n      </Card>\r\n    );\r\n  } else {\r\n    if (restaurant == null) {\r\n      return (\r\n        <Card>\r\n          <Card.Body>Unable to find Restaurant with id: {props.id}</Card.Body>\r\n        </Card>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <br></br>\r\n          <Card bg=\"light\">\r\n            <Card.Body>\r\n              <Card.Title>{restaurant.name}</Card.Title>\r\n              <Card.Subtitle className=\"mb-2 text-muted\">\r\n                {restaurant.address.building} {restaurant.address.street}\r\n              </Card.Subtitle>\r\n              <Card.Text></Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          <br></br>\r\n          <MapContainer\r\n            style={{ height: \"400px\" }}\r\n            center={[restaurant.address.coord[1], restaurant.address.coord[0]]}\r\n            zoom={13}\r\n            scrollWheelZoom={false}\r\n          >\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Marker\r\n              position={[\r\n                restaurant.address.coord[1],\r\n                restaurant.address.coord[0],\r\n              ]}\r\n            ></Marker>\r\n          </MapContainer>\r\n          <hr></hr>\r\n          <h3>Ratings</h3>\r\n\r\n          <CardDeck>\r\n            {restaurant.grades.map((rest, id) => {\r\n              return (\r\n                <Card key={`${id}`}>\r\n                  <Card.Header>Grade: {rest.grade}</Card.Header>\r\n                  <Card.Body>\r\n                    <Card.Text>\r\n                      Completed: {moment(rest.date).format(\"L\")}\r\n                    </Card.Text>\r\n                  </Card.Body>\r\n                </Card>\r\n              );\r\n            })}\r\n          </CardDeck>\r\n          <hr></hr>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default function NotFound(){\r\n    return (\r\n        <div><h1>Not Found</h1><p>We can't find what you're looking for...</p></div>\r\n    )\r\n}","import \"./App.css\";\n\nimport {\n  Button,\n  Col,\n  Container,\n  Form,\n  FormControl,\n  Nav,\n  Navbar,\n  Row,\n} from \"react-bootstrap\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport About from \"./About\";\nimport Restaurants from \"./Restaurants\";\nimport Restaurant from \"./Restaurant\";\nimport NotFound from \"./NotFound\";\n\nfunction App() {\n  const [searchString, setSearchString] = useState(\"\");\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    history.push(`/restaurants?borough=${searchString}`);\n    setSearchString(\"\");\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <LinkContainer to=\"/\">\n          <Navbar.Brand>New York Restaurants</Navbar.Brand>\n        </LinkContainer>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/restaurants\">\n              <Nav.Link>Full List</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/about\">\n              <Nav.Link>About</Nav.Link>\n            </LinkContainer>\n          </Nav>\n          <Form onSubmit={handleSubmit} inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Borough\"\n              className=\"mr-sm-2\"\n              value={searchString}\n              onChange={(e) => setSearchString(e.target.value)}\n            />\n            <Button type=\"submit\" variant=\"outline-success\">\n              Search\n            </Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n      <Container>\n        <Row>\n          <Col>\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={() => <Redirect to=\"/Restaurants\" />}\n              />\n              <Route exact path=\"/about\" render={() => <About />} />\n              <Route\n                exact\n                path=\"/Restaurants\"\n                render={(props) => (\n                  <Restaurants query={props.location.search} />\n                )}\n              />\n              <Route\n                path=\"/Restaurant/:id\"\n                render={(props) => <Restaurant id={props.match.params.id} />}\n              />\n\n              <Route render={() => <NotFound />} />\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n      <br />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/********************************************************************************* \n * WEB422 – Assignment 3 \n * I declare that this assignment is my own work in accordance with Seneca Academic Policy. \n * No part of this assignment has been copied manually or electronically from any other source \n * (including web sites) or distributed to other students. \n * \n * Name: Ye Jin Kim     Student ID: 163291180      Date: Feb 17th, 2021\n * \n * \n ********************************************************************************/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}